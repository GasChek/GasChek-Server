# Generated by Django 5.0.2 on 2024-02-15 13:04

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Abandoned_Subaccounts",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("company_name", models.CharField(max_length=50)),
                ("subaccount_code", models.CharField(blank=True, max_length=100)),
                ("subaccount_id", models.BigIntegerField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("email", models.EmailField(blank=True, max_length=50, unique=True)),
                ("first_name", models.CharField(blank=True, max_length=50)),
                ("last_name", models.CharField(blank=True, max_length=50)),
                ("address", models.CharField(blank=True, max_length=1000)),
                ("country_code", models.CharField(blank=True, max_length=10)),
                ("phonenumber", models.CharField(blank=True, max_length=25)),
                ("state", models.CharField(blank=True, max_length=25)),
                ("is_dealer", models.BooleanField(default=False)),
                ("is_verified", models.BooleanField(default=False)),
                ("verified_email", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Gas_Dealer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("company_name", models.CharField(max_length=50)),
                ("phonenumber", models.CharField(max_length=15)),
                ("state", models.CharField(max_length=25)),
                ("rating", models.CharField(blank=True, max_length=10)),
                ("users_rate_count", models.CharField(blank=True, max_length=10000)),
                (
                    "users_rate_cummulation",
                    models.CharField(blank=True, max_length=10000),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("selling", models.BooleanField(default=True)),
                ("open", models.BooleanField(default=False)),
                ("sold", models.BigIntegerField(default=0)),
                ("longitude", models.CharField(max_length=500)),
                ("latitude", models.CharField(max_length=500)),
                ("address", models.CharField(max_length=500)),
                ("account_number", models.CharField(max_length=30)),
                ("bank_name", models.CharField(max_length=50)),
                ("bank_code", models.CharField(max_length=5)),
                (
                    "percentage_charge",
                    models.DecimalField(blank=True, decimal_places=1, max_digits=4),
                ),
                ("subaccount_code", models.CharField(blank=True, max_length=100)),
                ("subaccount_id", models.BigIntegerField(blank=True)),
                ("is_verified", models.BooleanField(default=False)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Delivery_Fee",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("price", models.IntegerField()),
                (
                    "gas_dealer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.gas_dealer",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Cylinder_Price",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("cylinder", models.DecimalField(decimal_places=1, max_digits=10)),
                ("price", models.IntegerField()),
                (
                    "gas_dealer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.gas_dealer",
                    ),
                ),
            ],
            options={
                "ordering": ["gas_dealer"],
            },
        ),
        migrations.CreateModel(
            name="Gaschek_Device",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("device_id", models.CharField(max_length=50, unique=True)),
                ("password", models.CharField(max_length=50, unique=True)),
                (
                    "alarm",
                    models.CharField(
                        choices=[("off", "off"), ("on", "on")],
                        default="off",
                        max_length=10,
                    ),
                ),
                (
                    "call",
                    models.CharField(
                        choices=[("off", "off"), ("on", "on")],
                        default="off",
                        max_length=10,
                    ),
                ),
                (
                    "text",
                    models.CharField(
                        choices=[("off", "off"), ("on", "on")],
                        default="off",
                        max_length=10,
                    ),
                ),
                (
                    "indicator",
                    models.CharField(
                        choices=[("off", "off"), ("on", "on")],
                        default="off",
                        max_length=10,
                    ),
                ),
                ("cylinder", models.CharField(default="0kg", max_length=10)),
                ("gas_mass", models.FloatField(default="0", max_length=10)),
                ("gas_level", models.IntegerField(default=0)),
                ("battery_level", models.IntegerField(default=0)),
                ("country_code", models.CharField(blank=True, max_length=10)),
                (
                    "phonenumber_gaschek_device_1",
                    models.CharField(blank=True, max_length=25),
                ),
                (
                    "phonenumber_gaschek_device_2",
                    models.CharField(blank=True, max_length=25),
                ),
                (
                    "phonenumber_gaschek_device_3",
                    models.CharField(blank=True, max_length=25),
                ),
                ("is_connected_with_device", models.BooleanField(default=False)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Token",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("otp", models.CharField(max_length=6)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]
